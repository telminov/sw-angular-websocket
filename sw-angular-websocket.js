(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module('swWebSocket', []).constant('WS_STATUSES', ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED']).constant('WS_CLOSE_STATUSES', ['CLOSING', 'CLOSED']).constant('WS_OPEN_STATUS', 'OPEN').factory('swWebSocket', function($q, $interval, $timeout, WS_STATUSES, WS_CLOSE_STATUSES, WS_OPEN_STATUS) {
    var swWebSocket;
    swWebSocket = (function() {
      function swWebSocket(wsUri) {
        this.wsUri = wsUri;
        this.durable = false;
        this.messagesToSend = [];
        this.startHandlers = [];
        this.messageHandlers = [];
        this.errorHandlers = [];
        this._socket = void 0;
      }

      swWebSocket.prototype.start = function(durable) {
        this._getSocket();
        if (durable) {
          return this.durable = true;
        }
      };

      swWebSocket.prototype.close = function() {
        this.durable = false;
        return this._socket.close();
      };

      swWebSocket.prototype.send = function(msg) {
        this.messagesToSend.push(msg);
        return this._getSocket();
      };

      swWebSocket.prototype.onStart = function(callback) {
        return this.startHandlers.push(callback);
      };

      swWebSocket.prototype.onMessage = function(callback) {
        return this.messageHandlers.push(callback);
      };

      swWebSocket.prototype.onError = function(callback) {
        return this.errorHandlers.push(callback);
      };

      swWebSocket.prototype.getStatus = function() {
        var status;
        status = void 0;
        if (this._socketExists()) {
          status = WS_STATUSES[this._socket.readyState];
        }
        return status;
      };

      swWebSocket.prototype.isOpen = function() {
        return this.getStatus() === WS_OPEN_STATUS;
      };

      swWebSocket.prototype.isClosed = function() {
        var ref;
        return ref = this.getStatus(), indexOf.call(WS_CLOSE_STATUSES, ref) >= 0;
      };

      swWebSocket.prototype._getSocket = function() {
        if (!this._isSocketActive()) {
          this._socket = this._createSocket();
        }
        return this._socket;
      };

      swWebSocket.prototype._createSocket = function() {
        var socket;
        socket = new WebSocket(this.wsUri);
        socket.onopen = (function(_this) {
          return function(event) {
            return _this._onSocketOpen(event);
          };
        })(this);
        socket.onclose = (function(_this) {
          return function(event) {
            return _this._onSocketClose(event);
          };
        })(this);
        socket.onmessage = (function(_this) {
          return function(event) {
            return _this._onSocketMessage(event);
          };
        })(this);
        return socket;
      };

      swWebSocket.prototype._onSocketOpen = function(event) {
        var handler, i, len, ref;
        ref = this.startHandlers;
        for (i = 0, len = ref.length; i < len; i++) {
          handler = ref[i];
          handler(event.data);
        }
        return this._startSend();
      };

      swWebSocket.prototype._onSocketMessage = function(event) {
        var handler, i, len, ref, results;
        ref = this.messageHandlers;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          handler = ref[i];
          results.push(handler(event.data));
        }
        return results;
      };

      swWebSocket.prototype._onSocketClose = function() {
        var restartConnection;
        this._stopSend();
        if (this.durable) {
          restartConnection = (function(_this) {
            return function() {
              return _this._getSocket();
            };
          })(this);
          return $timeout(restartConnection, 2000);
        }
      };

      swWebSocket.prototype._startSend = function() {
        var sendMsg;
        sendMsg = (function(_this) {
          return function() {
            var msg, results;
            results = [];
            while (_this._messagesExists() && _this._isSocketActive()) {
              msg = _this.messagesToSend.shift();
              results.push(_this._getSocket().send(msg));
            }
            return results;
          };
        })(this);
        return this.stopSendPromise = $interval(sendMsg, 500);
      };

      swWebSocket.prototype._stopSend = function() {
        if (this.stopSendPromise !== void 0) {
          return $interval.cancel(this.stopSendPromise);
        }
      };

      swWebSocket.prototype._socketExists = function() {
        return this._socket !== void 0;
      };

      swWebSocket.prototype._isSocketActive = function() {
        return this._socketExists() && !this.isClosed();
      };

      swWebSocket.prototype._messagesExists = function() {
        return this.messagesToSend.length > 0;
      };

      return swWebSocket;

    })();
    return swWebSocket;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,